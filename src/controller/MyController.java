package controller;

import java.net.URL;
import java.sql.*;
import java.util.ResourceBundle;
import org.postgresql.ds.PGSimpleDataSource;
import org.postgresql.util.PSQLException;

import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.control.TableColumn.CellDataFeatures;
import javafx.util.Callback;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.input.MouseEvent;

public class MyController implements Initializable {

	@SuppressWarnings("rawtypes")
	private ObservableList<ObservableList> data;
	private PGSimpleDataSource dataSource;
	private String[] inarr;
	private Connection connection;
	private ResultSet rset;

	@FXML
	private Label label, insertLabel;
	@FXML
	private Button loadData, chooseButton, updateButton, disconnect, deleteButton, updateTable, insertButton;
	@FXML
	private ProgressIndicator progress;
	@FXML
	private Tab outputTableTab, insertTableTab;
	@SuppressWarnings("rawtypes")
	@FXML
	private TableView gamerTableView, updateTableView;
	@FXML
	private TextField dbIP, dbName, dbUser, dbPass, inputNumber, nummerTF, bezeichnungTF, gewichtTF;
	@FXML
	private TextField nummerTFI, bezeichnungTFI, gewichtTFI;

	/**
	 * handleButtonAction 
	 * will be executed, when the "connect" button in the
	 * "connect to database" is pressed. It tries to connect to a database by
	 * using the given parameters. In case they're working, the main select
	 * statement will be executed
	 * 
	 * @param event
	 *            ActionEvent generated by the click event
	 */
	public void handleButtonAction(ActionEvent event) {

		System.out.println("Connecting to database...");

		data = FXCollections.observableArrayList();

		// data source configuration
		dataSource = new PGSimpleDataSource();
		dataSource.setServerName(dbIP.getText());
		dataSource.setDatabaseName(dbName.getText());
		dataSource.setUser(dbUser.getText());
		dataSource.setPassword(dbPass.getText());

		// building up the connection to the database
		try {
			connection = dataSource.getConnection();
			// prepare statement and execute it
			Statement statement = connection.createStatement();
			rset = statement.executeQuery("select * from produkt");

			label.setText("connected!");
			System.out.println("successfully connected!");

			getTable();

			// error handling with error messages
		} catch (PSQLException e) {
			System.err.println("PSQL Error");
			label.setText("SQL Error");
			e.printStackTrace(System.err);
		} catch (SQLException se) {
			System.err.println("SQL Error");
			label.setText("SQL Error");
			se.printStackTrace(System.err);
		}
	}

	/**
	 * getTable 
	 * adds all needed data to the tableView if executed
	 */
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public void getTable() {

		try {
			Statement statement = connection.createStatement();
			rset = statement.executeQuery("select * from produkt");

			// the tabs are accessible, in case of a successful connection
			// and the progress indicator will be set to "finished"
			outputTableTab.setDisable(false);
			insertTableTab.setDisable(false);
			progress.setProgress(100);

			// clear all columns in the tableView
			gamerTableView.getColumns().clear();

			data.clear();
			data = FXCollections.observableArrayList();

			// this algorithm detects the number of columns
			for (int i = 0; i < rset.getMetaData().getColumnCount(); i++) {
				// We are using non property style for making dynamic table
				final int j = i;
				TableColumn col = new TableColumn(rset.getMetaData().getColumnName(i + 1));
				col.setCellValueFactory(
						new Callback<CellDataFeatures<ObservableList, String>, ObservableValue<String>>() {
							public ObservableValue<String> call(CellDataFeatures<ObservableList, String> param) {
								return new SimpleStringProperty(param.getValue().get(j).toString());
							}
						});

				gamerTableView.getColumns().addAll(col);
			}

			// save results in ObservableList data which will be added to the
			// tableView
			while (rset.next()) { // move cursor
				ObservableList<String> row = FXCollections.observableArrayList();
				for (int i = 1; i <= rset.getMetaData().getColumnCount(); i++) {
					// Iterate Column
					row.add(rset.getString(i));

				}
				data.add(row);
			}

			// adding the data to the tableView
			gamerTableView.setItems(data);

			// after the successful connection construction, the connect button
			// will (logically) disabled
			// and the disconnect button enabled
			loadData.setDisable(true);
			disconnect.setDisable(false);
		} catch (Exception e) {
			System.err.println("Error while getting the table data...");
		}
	}

	/**
	 * updateClicked 
	 * will be executed, if the "update" button for the row update
	 * is pressed. It takes the given parameters and puts them into a SQL
	 * statement, which is protected by a transaction.
	 * 
	 * @param event
	 *            ActionEvent generated by the click event
	 * @throws SQLException
	 *             could throw a SQLException, caused by the rollback() method
	 */
	@FXML
	public void updateClicked(ActionEvent event) throws SQLException {

		try {
			if (gewichtTF.getText().matches("^-?\\d+$") && nummerTF.getText().matches("^-?\\d+$")) {

				int num = Integer.parseInt(nummerTF.getText());
				int gew = Integer.parseInt(gewichtTF.getText());
				String bez = bezeichnungTF.getText();

				String sql = "UPDATE produkt SET bezeichnung=?, gewicht=? WHERE nummer=?";

				connection.setAutoCommit(false);

				PreparedStatement statement = connection.prepareStatement(sql);

				statement.setString(1, bez);
				statement.setInt(2, gew);
				statement.setInt(3, num);

				statement.executeUpdate();

				connection.commit();

				System.out.println("Update successful");

				updateTableClicked(null);

			} else {
				gewichtTF.setText("Integer!");
				System.err.println("Enter integer values!");
			}

		} catch (SQLException se) {
			// transaction rollback in case of an error with the SQL statement
			connection.rollback();
			System.err.println("Update Error");
			se.printStackTrace(System.err);
		}
	}

	/**
	 * updateTableClicked 
	 * will be executed, when the upper "update" button for
	 * the tableView is pressed. Clears the whole tableView to add the latest
	 * data.
	 * 
	 * @param event
	 *            ActionEvent generated by the click event
	 */
	@FXML
	public void updateTableClicked(ActionEvent event) {

		// clear all columns in the tableView
		gamerTableView.getColumns().clear();

		data.clear();
		data = FXCollections.observableArrayList();

		// new data is inserted
		getTable();
		// handleButtonAction(null);

	}

	/**
	 * disconnectPressed 
	 * disconnect button pressed; tabs will be deactivated and
	 * the textfields reset for clean reuse. simple explained: the program will
	 * be "reseted"
	 * 
	 * @param event
	 *            ActionEvent generated by the click event
	 */
	@FXML
	public void disconnectPressed(ActionEvent event) {

		try {
			connection.close();

			label.setText("not connected");
			outputTableTab.setDisable(true);
			insertTableTab.setDisable(true);
			progress.setProgress(0);
			loadData.setDisable(false);
			disconnect.setDisable(true);

			nummerTF.setText("");
			bezeichnungTF.setText("");
			gewichtTF.setText("");

			nummerTFI.setText("");
			bezeichnungTFI.setText("");
			gewichtTFI.setText("");

			updateButton.setDisable(true);
			deleteButton.setDisable(true);

			System.out.println("Disconnected");

		} catch (SQLException e) {
			System.err.println("Connection could not be closed!");
			label.setText("Error");
			e.printStackTrace();
		}

	}

	/**
	 * insertClicked 
	 * checks if the given input for the insert is valid. In this
	 * case, it will be inserted into the database.
	 * 
	 * @param event
	 *            ActionEvent generated by the click event
	 * @throws SQLException
	 *             could throw a SQLException, caused by the rollback() method
	 */
	@FXML
	public void insertClicked(ActionEvent event) throws SQLException {

		// check1 and 2 will check, if the input number fits into an Integer and
		// to avoid errors, the values
		// are temporarily stored into a larger float variable
		float check1 = Float.parseFloat(nummerTFI.getText());
		float check2 = Float.parseFloat(nummerTFI.getText());

		// checks, if the necessary values are numeral (nummer, gewicht)
		if (nummerTFI.getText().matches("^-?\\d+$") && gewichtTFI.getText().matches("^-?\\d+$") && check1 < 999999999
				&& check2 < 999999999) {

			int num = (int) check1;
			int gew = (int) check2;
			String bez = bezeichnungTFI.getText();

			try {
				String sql = "INSERT INTO produkt VALUES (?, ?, ?)";

				// transaction started
				connection.setAutoCommit(false);

				PreparedStatement statement = connection.prepareStatement(sql);

				statement.setInt(1, num);
				statement.setString(2, bez);
				statement.setInt(3, gew);

				statement.executeUpdate();

				// transaction committed
				connection.commit();

				System.out.println("Insert successful!");
				insertLabel.setText("Insert successful");

				nummerTFI.setText("");
				gewichtTFI.setText("");
				bezeichnungTFI.setText("");

				updateTableClicked(null);

			} catch (SQLException e) {
				// transaction rollback in case of an SQL error
				connection.rollback();
				insertLabel.setText("Insert error!");
				System.err.println("Insert error!");
				e.printStackTrace();

			}

		} else {
			insertLabel.setText("ERROR: check your input! nummer and gewicht have to be integer!");
			System.err.print("ERROR: check your input! nummer and gewicht have to be integer!");
		}
	}

	/**
	 * onMouseClicked 
	 * will be executed, if the user clicks inside the tableView
	 * on a cell. This method reads the data, which is inside the clicked row.
	 * 
	 * @param event
	 *            MouseEvent generated by the mouse event
	 */
	@FXML
	public void onMouseClicked(MouseEvent event) {

		// get the clicked row
		@SuppressWarnings("rawtypes")
		TablePosition focusedCell = gamerTableView.getFocusModel().getFocusedCell();
		int row = focusedCell.getRow();

		// get the data of this row
		String input = data.get(row) + "";

		// the [] of the string are removed
		input = input.substring(1, input.length() - 1);

		// split the string up at ", "
		inarr = input.split(", ");

		// enable the update button, to enable the user to click it, as now the
		// cell is chosen
		updateButton.setDisable(false);
		deleteButton.setDisable(false);

		// the content of the chosen row is inserted into the textfields
		nummerTF.setText(inarr[0]);
		bezeichnungTF.setText(inarr[1]);
		gewichtTF.setText(inarr[2]);

		bezeichnungTF.setDisable(false);
		gewichtTF.setDisable(false);

	}

	/**
	 * deleteClicked 
	 * this method will be executed, when the delete button is
	 * pressed in the output tab. It will execute a delete SQL statment which
	 * deletes the selected row.
	 * 
	 * @param event
	 *            MouseEvent generated by the mouse event
	 * @throws SQLException
	 *             could throw a SQLException, caused by the rollback() method
	 */
	@FXML
	public void deleteClicked(ActionEvent event) throws SQLException {

		try {

			// Statement stmt = connection.createStatement();
			// stmt.execute("SET FOREIGN_KEY_CHECKS=0");
			// stmt.close();

			connection.setAutoCommit(false);

			String sql = "DELETE FROM produkt WHERE nummer=?";

			PreparedStatement statement = connection.prepareStatement(sql);

			statement.setInt(1, Integer.parseInt(inarr[0]));
			statement.executeUpdate();

			connection.commit();

			System.out.println("Delete successful");

			updateTableClicked(null);

			// disable the update button, to prevent the user to click it, as no
			// cell is selected
			updateButton.setDisable(true);
			deleteButton.setDisable(true);

		} catch (SQLException se) {
			connection.setAutoCommit(false);
			// transaction rollback in case of an error with the SQL statement
			connection.rollback();
			System.err.println("Delete Error");
			se.printStackTrace(System.err);
		}
	}

	/**
	 * initialize necessary method of Initializable
	 */
	@Override
	public void initialize(URL location, ResourceBundle resources) {
		// not much to do here...
	}
}
